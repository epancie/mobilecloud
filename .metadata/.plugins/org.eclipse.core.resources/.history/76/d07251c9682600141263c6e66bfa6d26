/*
 * 
 * Copyright 2014 Jules White
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */
package org.magnum.dataup;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import org.springframework.data.rest.webmvc.ResourceNotFoundException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.context.request.RequestContextHolder;
import org.springframework.web.context.request.ServletRequestAttributes;

import java.io.DataInputStream;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import java.util.concurrent.atomic.AtomicLong;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.magnum.dataup.model.Video;
import org.magnum.dataup.model.VideoStatus;
import org.magnum.dataup.model.VideoStatus.VideoState;
import org.omg.CORBA.portable.InputStream;
import org.pancho.loger.Loger;

import com.google.gson.Gson;


@Controller
public class VideoController  {

	//loging
	private Loger LOG = new Loger();

	//video store in memory
	//private List<Video> videos = new CopyOnWriteArrayList<Video>();
		
	//One way to generate a unique ID for each video is to use an AtomicLong similar to this:
	private static final AtomicLong currentId = new AtomicLong(0L);
	private Map<Long,Video> videos = new HashMap<Long, Video>();
	
  	public Video save(Video entity) {
		checkAndSetId(entity);
		videos.put(entity.getId(), entity);
		return entity;
	}

	private void checkAndSetId(Video entity) {
		if(entity.getId() == 0){
			entity.setId(currentId.incrementAndGet());
		}
	}
	
	//The follow method allow set the URL of data video
    private String getDataUrl(long videoId){
        String url = getUrlBaseForLocalServer() + "/video/" + videoId + "/data";
        return url;
    }

    //This help before getDataUrl to write the exact BaseUrl
 	private String getUrlBaseForLocalServer() {
	   HttpServletRequest request = 
	       ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();
	   String base = 
	      "http://"+request.getServerName() 
	      + ((request.getServerPort() != 80) ? ":"+request.getServerPort() : "");
	   return base;
	}
	
 	//declare the VideoFileManager before it can be used 
 	private VideoFileManager videoDataMgr;
 	
 	public void setVideoData () {
        try {
        	videoDataMgr = VideoFileManager.get();
        } catch (IOException e) {
        	e.printStackTrace();
        }
 	}
 	
    //this method save the video in the filesystem
 	public void saveSomeVideo(Video v, MultipartFile videoData) throws IOException {
 		//getInputStream put the MultiPartFile in Byte
 		try {
 			videoDataMgr.saveVideoData(v, videoData.getInputStream());
 		}catch (IOException e){
 			e.printStackTrace();
 		}
        
   }
 	//this method get the video v from filesystem and put it in resonse
  	public void serveSomeVideo(Video v, HttpServletResponse response) throws IOException {
 	     // Of course, you would need to send some headers, etc. to the
 	     // client too!
 	     //  ...
  		response.setStatus(200, "OK");
 	    videoDataMgr.copyVideoData(v, response.getOutputStream());
 	}
 	
 	
	/*
	 GET /video
	   - Returns the list of videos that have been added to the server as JSON. The list of videos does 
	     not have to be  persisted across restarts of the server. The list of Video objects should be 
	     able to be unmarshalled by the client into a Collection<Video>.
	   - The return content-type should be application/json, which will be the default 
	     if you use @ResponseBody
	*/
	@RequestMapping(value=VideoSvcApi.VIDEO_SVC_PATH, method=RequestMethod.GET)
	public @ResponseBody Collection<Video> getVideoList(){
		LOG.output("Routing to GET " + VideoSvcApi.VIDEO_SVC_PATH);
		
		//put videos in JSON format
		Gson videoListiInJSON = new Gson();
		String jsonstrig = videoListiInJSON.toJson(videos);
		//log v
		LOG.output(jsonstrig);
		
		//The videos is a Map , but we need return a collection -> http://developer.android.com/reference/java/util/Map.html, we use values method of Mapt
		//that return a collectin
		return videos.values();
	}
 	
	/*
	  POST /video
	   - The video metadata is provided as an application/json request body. The JSON should generate a valid 
	     instance of the Video class when deserialized by Spring's default Jackson library.
	   - Returns the JSON representation of the Video object that was stored along with any updates to that 
	     object made by the server. 
	   - **_The server should generate a unique identifier for the Video object and assign it to the Video 
	     by calling its setId(...) method._** 
	   - No video should have ID = 0. All IDs should be > 0.
	   - The returned Video JSON should include this server-generated identifier so that the client can refer 
	     to it when uploading the binary mpeg video content for the Video.
	   - The server should also generate a "data url" for the Video. The "data url" is the url of the binary data for a
	     Video (e.g., the raw mpeg data). The URL should be the _full_ URL for the video and not just the 
	     path (e.g., http://localhost:8080/video/1/data would be a valid data url). See the Hints section for some 
	     ideas on how to generate this URL.
	*/
	@RequestMapping(value=VideoSvcApi.VIDEO_SVC_PATH, method=RequestMethod.POST)
	public @ResponseBody Video addVideo(@RequestBody Video v){
		LOG.output("Routing to POST " + VideoSvcApi.VIDEO_SVC_PATH);
		
				
		//set video id TODO-> Revisar esto 
		if (videos.size() == 0){
			v.setId(1);
		}
		else{
			v.setId(videos.size()+1);
		}
		
		//set the DataUrl where the binary MPEG is
				String dataUrl = getDataUrl(v.getId());
				v.setDataUrl(dataUrl);
		
		//add video in the Map
		save(v);
		
		//put v in JSON format
		Gson videoInJSON = new Gson();
		String jsonstrig = videoInJSON.toJson(v);
		//log v
		LOG.output(jsonstrig);
		
		//return the video
		return v;
		
	}
	

	
	/*
	POST /video/{id}/data
	   - The binary mpeg data for the video should be provided in a multipart
	     request as a part with the key "data". The id in the path should be
	     replaced with the unique identifier generated by the server for the
	     Video. A client MUST *create* a Video first by sending a POST to /video
	     and getting the identifier for the newly created Video object before
	     sending a POST to /video/{id}/data. 
	   - The endpoint should return a VideoStatus object with state=VideoState.READY
	     if the request succeeds and the appropriate HTTP error status otherwise.
	     VideoState.PROCESSING is not used in this assignment but is present in VideoState.
	   - Rather than a PUT request, a POST is used because, by default, Spring 
	     does not support a PUT with multipart data due to design decisions in the
	     Commons File Upload library: https://issues.apache.org/jira/browse/FILEUPLOAD-197
	*/
	
	
	@RequestMapping(value=VideoSvcApi.VIDEO_DATA_PATH, method=RequestMethod.POST)
	public @ResponseBody VideoStatus setVideoData( @PathVariable ("id") long id, 
			                                       @RequestParam ("data") MultipartFile data,
			                                       HttpServletResponse response) throws IOException {
		
		LOG.output("Routing to POST " + VideoSvcApi.VIDEO_DATA_PATH + ", videoid=" +id);
		
		setVideoData();
		try {
			Video v = videos.get(id);
			saveSomeVideo(v, data);
			response.setStatus(200, "OK");
			return new VideoStatus(VideoState.READY);	
			
		}
		catch(IndexOutOfBoundsException e){
			LOG.output("Exception " + e.toString() );
			response.setStatus(404, "error:" + e.toString());
			return new VideoStatus(VideoState.PROCESSING);
			
		}
		
	}
	
	/*
	GET /video/{id}/data
	   - Returns the binary mpeg data (if any) for the video with the given
	     identifier. If no mpeg data has been uploaded for the specified video,
	     then the server should return a 404 status code.
	*/
	@RequestMapping(value=VideoSvcApi.VIDEO_DATA_PATH, method=RequestMethod.GET)
	public @ResponseBody  void getData(@PathVariable ("id") long id, 
			HttpServletResponse response) throws IOException {
		
		LOG.output("Routing to GET " + VideoSvcApi.VIDEO_DATA_PATH + ", videoid=" +id);
		setVideoData();
		try {
			Video v = videos.get(id);
			serveSomeVideo(v, response);
		}
		catch(IndexOutOfBoundsException e){
			response.setStatus(404, "Error:" + e.toString());
			LOG.output("Exception " + e.toString() );
			
			
		}
		
	}
											
											

}
