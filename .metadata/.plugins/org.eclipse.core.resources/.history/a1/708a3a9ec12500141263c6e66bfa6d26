/*
 * 
 * Copyright 2014 Jules White
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *     http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * 
 */
package org.magnum.dataup;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;
import org.magnum.dataup.model.Video;
import org.magnum.dataup.model.VideoStatus;

import java.util.logging.Level;
import java.util.logging.Logger;


import com.google.gson.Gson;


@Controller
public class VideoController  {


	//video store in memory
	private List<Video> videos = new CopyOnWriteArrayList<Video>();
	
	private void _Log(String log) {
	    try {
	         Logger.getLogger(getClass().getName()).log(
	            Level.INFO, log);
	       } catch (Exception err) {
	         Logger.getLogger(getClass().getName()).log(
	            Level.SEVERE, "Mensaje crítico...", err);
	       }
	}
	
	/*
	  POST /video
	   - The video metadata is provided as an application/json request body. The JSON should generate a valid 
	     instance of the Video class when deserialized by Spring's default Jackson library.
	   - Returns the JSON representation of the Video object that was stored along with any updates to that 
	     object made by the server. 
	   - **_The server should generate a unique identifier for the Video object and assign it to the Video 
	     by calling its setId(...) method._** 
	   - No video should have ID = 0. All IDs should be > 0.
	   - The returned Video JSON should include this server-generated identifier so that the client can refer 
	     to it when uploading the binary mpeg video content for the Video.
	   - The server should also generate a "data url" for the Video. The "data url" is the url of the binary data for a
	     Video (e.g., the raw mpeg data). The URL should be the _full_ URL for the video and not just the 
	     path (e.g., http://localhost:8080/video/1/data would be a valid data url). See the Hints section for some 
	     ideas on how to generate this URL.
	*/
	@RequestMapping(value="/video", method=RequestMethod.POST)
	public @ResponseBody long addVideo(@RequestBody Video v){
		
		//set the DataUrl where the binary MPEG is
		String DataUrl = "http://localhost:8080/" + v.getId() + "/data";
		v.setDataUrl(DataUrl);
		
		//add video in the list
		videos.add(v);
		
		//put v in JSON format
		Gson videoJSON = new Gson();
		String jsonstrig = videoJSON.toJson(v);
		//log v
		_Log(jsonstrig);
		
		//return the video id
		return v.getId();
		
	}
	
	
	

	
	
	
}
